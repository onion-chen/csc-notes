import{_ as a,c as e,e as p,d as t,r as c,o}from"./app-BPIINpwt.js";const l={};function i(u,n){const s=c("Utterances");return o(),e("div",null,[n[0]||(n[0]=p(`<blockquote><p>本文详细介绍了JavaScript中的变量声明方式、作用域规则和生命周期管理。通过实例讲解var、let和const的使用场景和注意事项，帮助开发者编写更安全、可维护的代码。</p></blockquote><h1 id="javascript变量" tabindex="-1"><a class="header-anchor" href="#javascript变量"><span>JavaScript变量</span></a></h1><p>ECMAScript变量是松散的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命令占位符。目前有三个关键字可以声明变量：<code>var/const/let</code>，<code>var</code>在任何ESMCScript版本都可以使用。<code>const/let</code>只能在ECMAScript6及更晚的版本中使用。</p><h2 id="_1-var声明" tabindex="-1"><a class="header-anchor" href="#_1-var声明"><span>1.var声明</span></a></h2><p>要定义变量，可以使用<code>var</code>操作符，后面跟变量名</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> message<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这行代码定义了一个名为<code>message</code>的变量，可以用它保存任何类型的值（不初始化的情况下，变量会保存一个特殊值undefined）。</p><h3 id="_1-1-var声明作用域" tabindex="-1"><a class="header-anchor" href="#_1-1-var声明作用域"><span>1.1 var声明作用域</span></a></h3><p>使用<code>var</code>操作符定义的变量会变成包含它的函数的局部变量。比如，使用<code>var</code>在一个函数内部定义一个变量，就意味着该变量将在函数退出时销毁。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>message</code>变量是在函数内部使用<code>var</code>定义的。函数是<code>test</code>，调用它会创建这个变量并给它赋值。调用之后变量随即被销毁。不过，在函数内定义变量时省略<code>var</code>操作符，可以创建一个全局变量。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  message <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>去掉<code>var</code>操作符之后，<code>message</code>就变成了全局变量。只要调用一个函数<code>test()</code>，就会定义这个变量，并且在函数外部可以访问到。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>虽然可以通过剩余 <code>var</code> 操作符定义全局变量，但不推荐这么做。在局部作用域中定义的全局变量很难维护，也会造成困惑。在严格模式下，给未声明的变量复制，则会报错 <code>ReferenceError</code>。</p></div><h3 id="_1-2-var声明提升" tabindex="-1"><a class="header-anchor" href="#_1-2-var声明提升"><span>1.2 var声明提升</span></a></h3><p>使用<code>var</code>时，下面代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之所以不报错，是因为<code>ECMAScript</code>运行时把它等加成如下代码</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> age<span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是所谓的<code>提升</code>，也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用<code>var</code>声明同一个变量也是没有问题。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-let声明" tabindex="-1"><a class="header-anchor" href="#_2-let声明"><span>2.let声明</span></a></h2><p><code>let</code>跟<code>var</code>的作用差不多，但有着非常重要的区别。最明显的是，<code>let</code>声明的范围是块作用域，而<code>var</code>声明的范围是函数作用域。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tom</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// Tom</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: age没有定义</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>age</code>变量之所以不能在<code>if</code>块外部被引用，是因为它的作用域仅限于块内部。块作用域是函数作用域的子集，因此适用于<code>var</code>的作用域限制同样适用于<code>let</code>。</p><p><code>let</code>不允许在一个块中出现冗余声明，这样会导致报错。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> name<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> age<span class="token punctuation">;</span> <span class="token comment">// SyntaxError age已经被声明过了</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript引擎会记录用于变量声明的标识符以及所在的块作用域，一次嵌套使用相同的标识符不会报错，这是因为在同一个块中没有重复声明</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tom</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jerry</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于声明<code>冗余报错</code>不会因混用<code>let</code>和<code>var</code>受影响。这两个关键字声明并不是不同类型的变量，它们只是指出变量在相关作用域如何存在。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> name<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> name<span class="token punctuation">;</span> <span class="token comment">// SyntaxError</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> age<span class="token punctuation">;</span> <span class="token comment">// SyntaxError</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1暂时性死区" tabindex="-1"><a class="header-anchor" href="#_2-1暂时性死区"><span>2.1暂时性死区</span></a></h3><p><code>let</code>与<code>var</code>的另一个重要的区别，就是<code>let</code>声明的变量不会在作用域中被提升。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// name会提升</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// age 不会被提升</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在解析代码时，JavaScript引擎会注意出现在块后面的<code>let</code>声明，只不过在此之前不能以任何方式来引用未声明变量。在<code>let</code>声明之前的执行瞬间被称为<code>暂时性死区</code>，在此阶段引用任何后面才声明的变量都会抛出异常。</p><h3 id="_2-2全局声明" tabindex="-1"><a class="header-anchor" href="#_2-2全局声明"><span>2.2全局声明</span></a></h3><p>与<code>var</code>关键字不同，使用<code>let</code>在全局作用域中声明的变量，不会成为<code>window</code>对象的属性（var声明变量则会）。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tom</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，<code>let</code>声明仍然是在全局作用域中发生的，变量会在页面的生命周期内存在。</p><h3 id="_2-3条件声明" tabindex="-1"><a class="header-anchor" href="#_2-3条件声明"><span>2.3条件声明</span></a></h3><p>在使用<code>var</code>声明变量时，由于声明会被提升，JavaScript引擎会自动将多余的声明在作用域顶部合并为一个声明。因为<code>let</code>的作用域是块，所以不可能检查前面是否已经使用<code>let</code>声明过同名变量，一旦在同一个块作用域内重复使用let声明同名变量，就会抛出SyntaxError错误。</p><p>即使你想使用<code>try/catch</code>或<code>typeof</code>操作符也不能解决，因为条件块中<code>let</code>声明的作用域仅限于改块。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> name<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 因为name被限制在if块中，因此下面的赋值形同全局赋值</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span><span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果age没有被声明过，则会报错</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<code>let</code>声明不能依赖条件声明模式，<code>var</code>则可以。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不能使用<code>let</code>进行条件声明是好事，因为条件声明是一种反模式，让程序变得更难理解。</p></div><h3 id="_2-4for循环中的let" tabindex="-1"><a class="header-anchor" href="#_2-4for循环中的let"><span>2.4for循环中的let</span></a></h3><p>在<code>let</code>出现之前，<code>for</code>循环定义的迭代变量会渗透到循环体外部。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改成<code>let</code>之后，这个问题就没有了，因为迭代变量的作用域仅限于<code>for</code>循环块内部</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError i没有定义</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用var的时候，最常见的问题就是迭代变量的修改</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能会认为输出 <code>0、1、2、3、4</code></p><p>但结果输出的是 <code>5、5、5、5、5</code></p><p>之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时任务时，所有的<code>i</code>都是同一个变量。</p><p>在使用<code>let</code>声明迭代变量时，JavaScript引擎会为每个迭代循环声明一个新的迭代变量。每个<code>setTimeout</code>引用的都是不同的变量实例。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0、1、2、3、4</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-const声明" tabindex="-1"><a class="header-anchor" href="#_3-const声明"><span>3.const声明</span></a></h2><p><code>const</code>的行为与<code>let</code>基本相同，唯一一个重要的区别是<code>const</code>声明变量时必须同时初始化变量的值，且在尝试修改这个变量时会导致报错---<code>const</code>声明的是常量。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// TypeError 不能给常量赋值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>const</code>声明的限制只适用于它指向的变量引用。如果<code>const</code>变量引用的是一个对象，那么修改这个对象的属性是允许的。</p><h2 id="_4-声明风格及最佳实践" tabindex="-1"><a class="header-anchor" href="#_4-声明风格及最佳实践"><span>4.声明风格及最佳实践</span></a></h2><p>1.不使用var</p><p>有了<code>let/const</code>，大多数开发者会发现不在需要<code>var</code>了。限制自己使用<code>let/const</code>有助于提高代码的质量，因为变量有了明确的作用域、声明的位置、以及不变的值。</p><p>2.const优先，let次之</p><p>使用<code>const</code>声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此只有在提前知道未来会修改时再使用<code>let</code>。</p>`,66)),t(s)])}const d=a(l,[["render",i]]),k=JSON.parse('{"path":"/notes/web/javascript/base/grammar/%E5%8F%98%E9%87%8F.html","title":"JavaScript变量声明与作用域详解","lang":"zh-CN","frontmatter":{"title":"JavaScript变量声明与作用域详解","meta":[{"name":"description","content":"深入理解JavaScript变量声明、作用域和生命周期，包括var、let和const的区别，变量提升机制，以及最佳实践指南"},{"name":"keywords","content":"JavaScript变量, var声明, let声明, const声明, 变量提升, 暂时性死区, 块级作用域, 全局作用域, 变量声明最佳实践"},{"name":"author","content":"CSC"},{"name":"date","content":"2025-05-19T00:00:00.000Z"}]},"headers":[{"level":2,"title":"1.var声明","slug":"_1-var声明","link":"#_1-var声明","children":[{"level":3,"title":"1.1 var声明作用域","slug":"_1-1-var声明作用域","link":"#_1-1-var声明作用域","children":[]},{"level":3,"title":"1.2 var声明提升","slug":"_1-2-var声明提升","link":"#_1-2-var声明提升","children":[]}]},{"level":2,"title":"2.let声明","slug":"_2-let声明","link":"#_2-let声明","children":[{"level":3,"title":"2.1暂时性死区","slug":"_2-1暂时性死区","link":"#_2-1暂时性死区","children":[]},{"level":3,"title":"2.2全局声明","slug":"_2-2全局声明","link":"#_2-2全局声明","children":[]},{"level":3,"title":"2.3条件声明","slug":"_2-3条件声明","link":"#_2-3条件声明","children":[]},{"level":3,"title":"2.4for循环中的let","slug":"_2-4for循环中的let","link":"#_2-4for循环中的let","children":[]}]},{"level":2,"title":"3.const声明","slug":"_3-const声明","link":"#_3-const声明","children":[]},{"level":2,"title":"4.声明风格及最佳实践","slug":"_4-声明风格及最佳实践","link":"#_4-声明风格及最佳实践","children":[]}],"git":{"updatedTime":1747914312000,"contributors":[{"name":"chenshicong","username":"chenshicong","email":"chenshicong666@qq.com","commits":5,"url":"https://github.com/chenshicong"}],"changelog":[{"hash":"a6bd8c6a5091b9bf28ecc251928d960482f57a42","time":1747914312000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"完成一元运算符"},{"hash":"d78ea0ac931ae3ba09698cb79415ce6c1e5c2ac2","time":1747659450000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"优化SEO"},{"hash":"4de6130e804bbf364f9c9b304dcd97ea44d704eb","time":1747656921000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"完成数据类型"},{"hash":"7f9e1669cbce7cf7fddb2dc6d9204ded4e12ce00","time":1746537073000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"主页修改"},{"hash":"347360227d1c21ae2a00644b623b011669005f8a","time":1746535232000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"JavaScript变量"}]},"filePathRelative":"notes/web/javascript/base/grammar/变量.md"}');export{d as comp,k as data};
