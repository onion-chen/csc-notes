import{_ as s,c as a,e as o,d as c,r as i,o as d}from"./app-BPIINpwt.js";const l={};function p(t,e){const n=i("Utterances");return d(),a("div",null,[e[0]||(e[0]=o(`<h2 id="_1-🗃️-node模块实现" tabindex="-1"><a class="header-anchor" href="#_1-🗃️-node模块实现"><span>1. 🗃️ Node模块实现</span></a></h2><p>在Node中引入模块需要三个步骤</p><ul><li>路径分析</li><li>文件定位</li><li>编译执行</li></ul><p>在Node中模块分为两类：一类是Node提供的模块，称为核心模块；另一类是用户编写的模块，称为文件模块。</p><p>核心模块部分在Node源代码的编译过程中，编译进行了二进制执行文件。在Node进程启动的时，部分核心模块就被直接加载到内存中，这部分核心模块引入时，文件定位和编译执行这两步就可以直接省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。</p><p>文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。</p><h2 id="_2-🛅-优先从缓存加载" tabindex="-1"><a class="header-anchor" href="#_2-🛅-优先从缓存加载"><span>2. 🛅 优先从缓存加载</span></a></h2><p>Node对引入过的模块都会进行缓存，以减少二次引入时的开销。不论是核心模块还是文件模块，<code>require()</code>方法对相同模块的二次加载一律采用缓存优先的方式。</p><h2 id="_3-⬆️-路径分析和文件定位" tabindex="-1"><a class="header-anchor" href="#_3-⬆️-路径分析和文件定位"><span>3. ⬆️ 路径分析和文件定位</span></a></h2><h3 id="_3-1-🏷️-模块标识符分析" tabindex="-1"><a class="header-anchor" href="#_3-1-🏷️-模块标识符分析"><span>3.1. 🏷️ 模块标识符分析</span></a></h3><p><code>require()</code>方法接收一个标识符作为参数。在Node实现中，正是基于这样一个标识符进行模块查找的。模块标识符在Node中主要分为以下几类。</p><ul><li>核心模块，如<code>http、fs、path</code>等。</li><li>.或..开始的相对路径文件模块。</li><li>以/开始的绝对路径文件模块。</li><li>非路径形式的文件模块，如<code>require(&#39;mymodule.js&#39;)</code>。</li></ul><h4 id="_3-1-1-🗂️-核心模块" tabindex="-1"><a class="header-anchor" href="#_3-1-1-🗂️-核心模块"><span>3.1.1. 🗂️ 核心模块</span></a></h4><p>核心模块优先级仅次于缓存加载，它在Node的源代码编译过程中已经编译为二进制代码，如果视图加载一个与核心模块标识符相同的自定义模块，那是不会成功的，如果自己编写了一个<code>http</code>模块，要想加载成功，必须选择一个不同的标识符或者换用路径的方式引入。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// http.js 自己编写http模块</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 希望这里打印字符串 http 是不会成功的。</span>
<span class="line"> * 因为自己命名的模块与核心模块名称冲突了，这会导致自定义的模块引入失败。</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确引入方式</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./http.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-1-2-🛩️-路径形式和文件模块" tabindex="-1"><a class="header-anchor" href="#_3-1-2-🛩️-路径形式和文件模块"><span>3.1.2. 🛩️ 路径形式和文件模块</span></a></h4><p>以<code>.</code>或<code>..</code>或<code>/</code>开始的标识符，都会被当做文件模块处理。在分析模块时，<code>require()</code>方法会将路径转化为真实路径，并以真实路径为索引，将编译后的结果放到缓存中，让二次加载更快。但是加载速度还是要慢于核心模块。</p><h4 id="_3-1-2-🤳-自定义模块" tabindex="-1"><a class="header-anchor" href="#_3-1-2-🤳-自定义模块"><span>3.1.2. 🤳 自定义模块</span></a></h4><p>自定义模块是一种非常特殊的文件模块，可能是一个文件或者包的形式。这类模块的查找是最费时的，也是所有方式中最慢的一种。</p><p>模块路径是Node在定义文件模块的具体文件时制定的查找策略，表现形式为一个路径数组。关于这个路径的生成规则，我们可以手动感受一下。</p><ul><li>创建一个a.js文件，内容为<code>console.log(module.paths);</code>。</li><li>将其放到任意一个目录中然后执行<code>node a.js</code>。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 打印这个路径数组</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * [</span>
<span class="line">  &#39;E:\\\\workspace\\\\csc-notes\\\\node_modules&#39;,</span>
<span class="line">  &#39;E:\\\\workspace\\\\node_modules&#39;,</span>
<span class="line">  &#39;E:\\\\node_modules&#39;</span>
<span class="line">]</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，模块路径的生成规则如下</p><ul><li>当前文件目录下的node_modules目录。</li><li>父级目录下的node_modules目录。</li><li>父级目录的父级目录下的node_moudles目录。</li><li>沿着路径逐级递归查找，直到根目录下的node_modules目录。 这种查找方式与JavaScript的原型链或作用域链的查找方式十分类似。在加载过程中，Node会逐个尝试模块路径中所有的路径，直到找到文件为止。可以看出，当文件的路径越深，模块查找耗时越多。</li></ul><h3 id="_3-2-↘️-文件定位" tabindex="-1"><a class="header-anchor" href="#_3-2-↘️-文件定位"><span>3.2. ↘️ 文件定位</span></a></h3><p>从缓存加载的优化策略使得二次引入时不需要路径分析、文件定位和编译执行的过程，大大提高了再次加载模块时的效率。</p><p>但在文件定位过程中，还需要一些细节需要注意，包括文件扩展名的分析、目录和包的处理。</p><h4 id="_3-2-1-🧩-文件扩展名分析" tabindex="-1"><a class="header-anchor" href="#_3-2-1-🧩-文件扩展名分析"><span>3.2.1. 🧩 文件扩展名分析</span></a></h4><p><code>require()</code>在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJS模块规范也允许在标识符中不包含文件扩展名，在这种情况下，Node会按照 <code>.js</code>、<code>.json</code>、<code>.node</code>的次序补足扩展名，以此尝试。</p><p>在尝试的过程中，需要调用fs模块同步阻塞式判断文件是否存在。因为Node是单线程的，所以这里是一个会引起性能问题的地方。小诀窍是：如果是<code>.node</code>、<code>.json</code>文件，在传递给<code>require()</code>的标识符中带上扩展名，会加快一点速度。</p><h4 id="_3-2-2-📓-目录分析和包" tabindex="-1"><a class="header-anchor" href="#_3-2-2-📓-目录分析和包"><span>3.2.2. 📓 目录分析和包</span></a></h4><p>在分析标识符的过程中，可能没有查到对应的文件，但却得到了一个目录，这在引入自定义模块和逐个模块路径时经常出现，此时Node会将目录当做一个包来处理。在这个过程中，Node对CommonJS包规范进行了一定程度的支持。首先，Node在当前目录下查找<code>package.json</code>，通过<code>JSON.parse()</code>解析出包描述对象，从中取出<code>main</code>属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析步骤。而如果<code>main</code>属性指定的文件名错误，或者压根没有<code>package.json</code>文件，Node会将<code>index</code>当做默认文件名，然后依次查找<code>index.js</code>、<code>index.json</code>、<code>index.node</code>。如果在目录分析过程中没有定位到任何的文件，则Node会进入到下一个模块路径进行查找。如果模块路径数组全部遍历完毕，依然没有找到目标文件，Node就会抛出异常。</p>`,35)),c(n)])}const u=s(l,[["render",p]]),h=JSON.parse('{"path":"/notes/server/nodejs/Node%E7%9A%84%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0.html","title":"Node模块实现","lang":"zh-CN","frontmatter":{"title":"Node模块实现","meta":[{"name":"description","content":"深入理解Node.js模块实现原理，包括路径分析、文件定位、编译执行以及核心模块、文件模块、自定义模块的加载机制和缓存优化。"},{"name":"keywords","content":"Node.js, 模块实现, require, 核心模块, 文件模块, 自定义模块, 模块加载, 缓存, 路径分析, 文件定位, 编译执行"}]},"headers":[{"level":2,"title":"1. 🗃️ Node模块实现","slug":"_1-🗃️-node模块实现","link":"#_1-🗃️-node模块实现","children":[]},{"level":2,"title":"2. 🛅 优先从缓存加载","slug":"_2-🛅-优先从缓存加载","link":"#_2-🛅-优先从缓存加载","children":[]},{"level":2,"title":"3. ⬆️ 路径分析和文件定位","slug":"_3-⬆️-路径分析和文件定位","link":"#_3-⬆️-路径分析和文件定位","children":[{"level":3,"title":"3.1. 🏷️ 模块标识符分析","slug":"_3-1-🏷️-模块标识符分析","link":"#_3-1-🏷️-模块标识符分析","children":[]},{"level":3,"title":"3.2. ↘️ 文件定位","slug":"_3-2-↘️-文件定位","link":"#_3-2-↘️-文件定位","children":[]}]}],"git":{"updatedTime":1747659450000,"contributors":[{"name":"chenshicong","username":"chenshicong","email":"chenshicong666@qq.com","commits":3,"url":"https://github.com/chenshicong"}],"changelog":[{"hash":"d78ea0ac931ae3ba09698cb79415ce6c1e5c2ac2","time":1747659450000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"优化SEO"},{"hash":"1eee15ad578cdfc62d1a0381dcf0b016c115af16","time":1745293651000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"添加文档说明"},{"hash":"d77eca965af30a4062cb012e254e74dae854453e","time":1744625069000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"修改目录结构，加入Node的模块实现"}]},"filePathRelative":"notes/server/nodejs/Node的模块实现.md"}');export{u as comp,h as data};
