import{_ as a,c as e,e as t,d as p,r as o,o as l}from"./app-BPIINpwt.js";const c={};function i(r,n){const s=o("Utterances");return l(),e("div",null,[n[0]||(n[0]=t(`<h1 id="_1-commonjs的模块规范" tabindex="-1"><a class="header-anchor" href="#_1-commonjs的模块规范"><span>1.CommonJS的模块规范</span></a></h1><h2 id="_1-1什么是commonjs" tabindex="-1"><a class="header-anchor" href="#_1-1什么是commonjs"><span>1.1什么是CommonJS？</span></a></h2><p>CommonJS是一个项目，其目标是为JavaScript在浏览器以外的平台（如服务器、桌面、命令行工具等）制定一个生态系统标准。它对模块定义进行了规范化，使JavaScript能够在任何地方开发和运行。</p><h2 id="_1-2为什么需要commonjs" tabindex="-1"><a class="header-anchor" href="#_1-2为什么需要commonjs"><span>1.2为什么需要CommonJS？</span></a></h2><p>在JavaScript发展历程中，主要在浏览器端发光发热。官方规范（ECMAScript）规范化的时间较早，规范涵盖的范畴非常小。随着HTML5规范的推广以及各大浏览器厂商对规范的支持，在浏览器中出现了更多、更强大的API调用。但对于后端JavaScript的规范却远远落后，对于JavaScript本身而言规范依然是薄弱的。主要体现在：</p><ul><li><strong>没有模块系统</strong>：缺乏一个标准的模块管理机制</li><li><strong>标准库少</strong>：ECMA仅定义了部分核心库，对于文件系统，I/O流等常见需求却没有标准的API，ECMA的规范主要还是停留在了前端浏览器上</li><li><strong>没有标准接口</strong>：在JavaScript中，几乎没有定义过Web服务器或者数据库之类的标准统一接口</li><li><strong>缺乏包管理系统</strong>：导致JavaScript基本没有能力自动加载和安装依赖</li></ul><p>CommonJS规范的提出是想让JavaScript具备开发大型应用的基础能力，主要应用场景包括：</p><ul><li><strong>服务端JavaScript应用程序</strong>：如Node.js服务器应用</li><li><strong>命令行工具</strong>：使用Node.js开发的CLI工具</li><li><strong>桌面图形界面应用程序</strong>：如Electron开发的跨平台桌面应用</li></ul><h2 id="_1-2commonjs的优势" tabindex="-1"><a class="header-anchor" href="#_1-2commonjs的优势"><span>1.2CommonJS的优势</span></a></h2><ul><li><strong>简单易用</strong>：采用同步加载模块的方式，代码清晰直观</li><li><strong>作用域隔离</strong>：每个模块都有独立的作用域，避免变量污染</li><li><strong>依赖管理</strong>：自动处理模块依赖关系，确保模块按正确顺序加载</li><li><strong>版本管理</strong>：配合npm包管理系统，可以方便地管理模块版本</li></ul><h2 id="_1-4commonjs具体规范定义" tabindex="-1"><a class="header-anchor" href="#_1-4commonjs具体规范定义"><span>1.4CommonJS具体规范定义</span></a></h2><p>CommonJS对模块的定义十分简单，主要分为三个核心概念：<strong>模块引用（require）</strong>、<strong>模块定义（exports）</strong>、<strong>模块标识（模块名）</strong>。让我们详细了解每个部分。</p><h2 id="_1-5模块引用-require" tabindex="-1"><a class="header-anchor" href="#_1-5模块引用-require"><span>1.5模块引用（require）</span></a></h2><p>模块引用是CommonJS规范中最基本的操作，通过<code>require()</code>方法来实现。</p><h3 id="_1-5-1基本语法" tabindex="-1"><a class="header-anchor" href="#_1-5-1基本语法"><span>1.5.1基本语法</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myModule&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入本地模块</span></span>
<span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 引入npm包</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-2require的特点" tabindex="-1"><a class="header-anchor" href="#_1-5-2require的特点"><span>1.5.2require的特点</span></a></h3><ul><li><strong>同步加载</strong>：模块加载是同步的，按顺序依次执行</li><li><strong>缓存机制</strong>：多次引用同一模块时只会加载一次</li><li><strong>路径解析</strong>：支持相对路径和绝对路径</li><li><strong>文件类型</strong>：可以引入.js、.json、.node等类型的文件</li></ul><h2 id="_1-6模块定义-exports" tabindex="-1"><a class="header-anchor" href="#_1-6模块定义-exports"><span>1.6模块定义（exports）</span></a></h2><p>在Node.js中，每个文件都被视为一个独立的模块。CommonJS规范提供了两种方式来导出模块内容：<code>exports</code>对象和<code>module.exports</code>。</p><h3 id="_1-6-1exports对象" tabindex="-1"><a class="header-anchor" href="#_1-6-1exports对象"><span>1.6.1exports对象</span></a></h3><p><code>exports</code>是一个特殊的对象，它是<code>module.exports</code>的引用。我们可以通过给<code>exports</code>添加属性来导出内容。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// math.js - 使用exports导出多个方法</span></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token function-variable function">subtract</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在其他文件中使用</span></span>
<span class="line"><span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./math&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 5</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-2module-exports对象" tabindex="-1"><a class="header-anchor" href="#_1-6-2module-exports对象"><span>1.6.2module.exports对象</span></a></h3><p><code>module.exports</code>是模块系统创建的对象，它是真正的导出对象。我们可以直接替换整个<code>module.exports</code>对象。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// person.js - 使用module.exports导出类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, I&#39;m </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Person<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在其他文件中使用</span></span>
<span class="line"><span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./person&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: Hello, I&#39;m 张三</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-3exports-vs-module-exports" tabindex="-1"><a class="header-anchor" href="#_1-6-3exports-vs-module-exports"><span>1.6.3exports vs module.exports</span></a></h3><p>理解<code>exports</code>和<code>module.exports</code>的关系是很重要的：</p><ol><li><strong>正确的用法</strong>：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 方式1：通过exports添加属性</span></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token function-variable function">method1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token function-variable function">method2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式2：直接替换module.exports</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">method2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>错误的用法</strong>：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 错误示例：混合使用导致exports失效</span></span>
<span class="line">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;主函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 这个方法不会被导出！</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;辅助函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-4最佳实践" tabindex="-1"><a class="header-anchor" href="#_1-6-4最佳实践"><span>1.6.4最佳实践</span></a></h3><ol><li><strong>保持一致性</strong>：在一个模块中只使用一种导出方式</li><li><strong>导出单一值</strong>：使用<code>module.exports</code></li><li><strong>导出多个值</strong>：使用<code>exports</code>或<code>module.exports</code>对象</li><li><strong>避免修改exports引用</strong>：不要使用<code>exports = {...}</code></li><li><strong>使用解构导入</strong>：推荐使用<code>const { method } = require(&#39;./module&#39;)</code>的方式导入需要的方法</li></ol><h2 id="_1-7模块标识-module-identifier" tabindex="-1"><a class="header-anchor" href="#_1-7模块标识-module-identifier"><span>1.7模块标识（Module Identifier）</span></a></h2><p>模块标识是传递给<code>require</code>方法的参数，用于定位和加载模块。Node.js支持多种类型的模块标识。</p><h3 id="_1-7-1模块标识的类型" tabindex="-1"><a class="header-anchor" href="#_1-7-1模块标识的类型"><span>1.7.1模块标识的类型</span></a></h3><ol><li><strong>核心模块</strong></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 内置模块</span></span>
<span class="line"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 内置模块</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>第三方模块</strong></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// npm安装的模块</span></span>
<span class="line"><span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// npm安装的模块</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>文件模块</strong></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 相对路径</span></span>
<span class="line"><span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myModule&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当前目录</span></span>
<span class="line"><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 上级目录</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 绝对路径</span></span>
<span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;/root/app/config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从根目录开始</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-2模块解析规则" tabindex="-1"><a class="header-anchor" href="#_1-7-2模块解析规则"><span>1.7.2模块解析规则</span></a></h3><ol><li><p><strong>文件扩展名</strong>：</p><ul><li>可以省略.js、.json、.node扩展名</li><li>按顺序尝试加载：.js → .json → .node</li></ul></li><li><p><strong>目录作为模块</strong>：</p><ul><li>查找package.json中的main字段</li><li>如果没有package.json，则查找index.js</li></ul></li><li><p><strong>node_modules查找</strong>：</p><ul><li>从当前目录开始，逐级向上查找node_modules目录</li><li>直到根目录或找到目标模块</li></ul></li></ol><h2 id="_1-8总结" tabindex="-1"><a class="header-anchor" href="#_1-8总结"><span>1.8总结</span></a></h2><p>CommonJS规范为JavaScript模块化开发提供了完整的解决方案：</p><ul><li><strong>简单易用</strong>：模块定义和使用方式直观</li><li><strong>作用域隔离</strong>：每个模块都有独立的作用域</li><li><strong>依赖管理</strong>：自动处理模块间的依赖关系</li><li><strong>灵活导出</strong>：支持多种导出方式</li></ul><p>通过CommonJS规范，我们可以构建出结构清晰、易于维护的Node.js应用。</p>`,49)),p(s)])}const d=a(c,[["render",i]]),m=JSON.parse('{"path":"/notes/server/nodejs/CommonJS%E8%A7%84%E8%8C%83.html","title":"CommonJS模块规范详解：模块化JavaScript开发标准","lang":"zh-CN","frontmatter":{"title":"CommonJS模块规范详解：模块化JavaScript开发标准","meta":[{"name":"description","content":"深入解析CommonJS模块规范，包括模块引用、定义和标识。了解为什么需要CommonJS，如何使用exports和module.exports，以及在Node.js中的最佳实践。"},{"name":"keywords","content":"CommonJS,Node.js,模块化开发,JavaScript模块系统,exports,module.exports,require,模块标识"}]},"headers":[{"level":2,"title":"1.1什么是CommonJS？","slug":"_1-1什么是commonjs","link":"#_1-1什么是commonjs","children":[]},{"level":2,"title":"1.2为什么需要CommonJS？","slug":"_1-2为什么需要commonjs","link":"#_1-2为什么需要commonjs","children":[]},{"level":2,"title":"1.2CommonJS的优势","slug":"_1-2commonjs的优势","link":"#_1-2commonjs的优势","children":[]},{"level":2,"title":"1.4CommonJS具体规范定义","slug":"_1-4commonjs具体规范定义","link":"#_1-4commonjs具体规范定义","children":[]},{"level":2,"title":"1.5模块引用（require）","slug":"_1-5模块引用-require","link":"#_1-5模块引用-require","children":[{"level":3,"title":"1.5.1基本语法","slug":"_1-5-1基本语法","link":"#_1-5-1基本语法","children":[]},{"level":3,"title":"1.5.2require的特点","slug":"_1-5-2require的特点","link":"#_1-5-2require的特点","children":[]}]},{"level":2,"title":"1.6模块定义（exports）","slug":"_1-6模块定义-exports","link":"#_1-6模块定义-exports","children":[{"level":3,"title":"1.6.1exports对象","slug":"_1-6-1exports对象","link":"#_1-6-1exports对象","children":[]},{"level":3,"title":"1.6.2module.exports对象","slug":"_1-6-2module-exports对象","link":"#_1-6-2module-exports对象","children":[]},{"level":3,"title":"1.6.3exports vs module.exports","slug":"_1-6-3exports-vs-module-exports","link":"#_1-6-3exports-vs-module-exports","children":[]},{"level":3,"title":"1.6.4最佳实践","slug":"_1-6-4最佳实践","link":"#_1-6-4最佳实践","children":[]}]},{"level":2,"title":"1.7模块标识（Module Identifier）","slug":"_1-7模块标识-module-identifier","link":"#_1-7模块标识-module-identifier","children":[{"level":3,"title":"1.7.1模块标识的类型","slug":"_1-7-1模块标识的类型","link":"#_1-7-1模块标识的类型","children":[]},{"level":3,"title":"1.7.2模块解析规则","slug":"_1-7-2模块解析规则","link":"#_1-7-2模块解析规则","children":[]}]},{"level":2,"title":"1.8总结","slug":"_1-8总结","link":"#_1-8总结","children":[]}],"git":{"updatedTime":1747659450000,"contributors":[{"name":"chenshicong","username":"chenshicong","email":"chenshicong666@qq.com","commits":4,"url":"https://github.com/chenshicong"}],"changelog":[{"hash":"d78ea0ac931ae3ba09698cb79415ce6c1e5c2ac2","time":1747659450000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"优化SEO"},{"hash":"1eee15ad578cdfc62d1a0381dcf0b016c115af16","time":1745293651000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"添加文档说明"},{"hash":"4f8aaeace2e40f47ca66bd889f3976bd3a2a2134","time":1744458825000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"更新笔记分组，新增css和文档"},{"hash":"43cfd364529133f426564d4d9492efc7189c468f","time":1744201214000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"新增CommonJS规范"}]},"filePathRelative":"notes/server/nodejs/CommonJS规范.md"}');export{d as comp,m as data};
