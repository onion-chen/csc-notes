import{_ as a,c as e,e as p,d as l,r as t,o as i}from"./app-BPIINpwt.js";const c={};function o(u,s){const n=t("Utterances");return i(),e("div",null,[s[0]||(s[0]=p(`<h1 id="javascript语法基础" tabindex="-1"><a class="header-anchor" href="#javascript语法基础"><span>JavaScript语法基础</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>ECMAScript的语法很大程度上借鉴了C语言和其他类C语言，这使得熟悉C/C++、Java等语言的开发者能够快速上手JavaScript编程。</p></div><p>本文将详细介绍JavaScript的基本语法规则，帮助你建立良好的编程习惯，编写出更加规范和高质量的JavaScript代码。</p><h2 id="_1-区分大小写" tabindex="-1"><a class="header-anchor" href="#_1-区分大小写"><span>1.区分大小写</span></a></h2><p>首先要知道，ECMAScript中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。这是JavaScript最基本的特性之一，需要特别注意：</p><ul><li>变量名大小写敏感：<code>Test</code>和<code>test</code>是两个完全不同的变量</li><li>函数名大小写敏感：<code>getMessage()</code>和<code>getmessage()</code>是不同的函数</li><li>属性名大小写敏感：<code>object.name</code>和<code>object.Name</code>引用的是不同的属性</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 大小写敏感示例</span></span>
<span class="line"><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">&quot;小写test&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> Test <span class="token operator">=</span> <span class="token string">&quot;大写Test&quot;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：小写test</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：大写Test</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 关键字的大小写</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>    <span class="token comment">// 有效的操作符</span></span>
<span class="line"><span class="token keyword">let</span> Typeof <span class="token operator">=</span> <span class="token string">&quot;自定义变量&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 有效的变量名</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token keyword">typeof</span> <span class="token operator">=</span> <span class="token string">&quot;错误&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 语法错误：typeof是关键字</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-标识符" tabindex="-1"><a class="header-anchor" href="#_2-标识符"><span>2.标识符</span></a></h2><p>标识符就是变量、函数、属性或函数参数的名称。在JavaScript中，标识符的命名需要遵循以下规则：</p><h3 id="_2-1-命名规则" tabindex="-1"><a class="header-anchor" href="#_2-1-命名规则"><span>2.1 命名规则</span></a></h3><ul><li>第一个字符必须是一个字母、下划线(_)或美元符号($)</li><li>剩下的其他字符可以是字母、下划线、美元符号或数字</li><li>标识符中可以使用扩展ASCII或Unicode字符</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 有效的标识符</span></span>
<span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> $price <span class="token operator">=</span> <span class="token number">99.99</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> _private <span class="token operator">=</span> <span class="token string">&quot;私有变量&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> 中文变量 <span class="token operator">=</span> <span class="token string">&quot;支持中文&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 无效的标识符</span></span>
<span class="line"><span class="token keyword">let</span> 1name <span class="token operator">=</span> <span class="token string">&quot;错误&quot;</span><span class="token punctuation">;</span>    <span class="token comment">// 不能以数字开头</span></span>
<span class="line"><span class="token keyword">let</span> user<span class="token operator">-</span>name <span class="token operator">=</span> <span class="token string">&quot;错误&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 不能包含连字符</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">&quot;错误&quot;</span><span class="token punctuation">;</span>    <span class="token comment">// 不能使用关键字</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-命名约定" tabindex="-1"><a class="header-anchor" href="#_2-2-命名约定"><span>2.2 命名约定</span></a></h3><p>虽然JavaScript的标识符命名规则很灵活，但在实际开发中，我们通常遵循以下约定：</p><ol><li><p><strong>驼峰命名法</strong>：这是最常用的命名方式，与ECMAScript内置函数和对象的命名方式一致</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 小驼峰命名法（推荐用于变量和函数名）</span></span>
<span class="line"><span class="token keyword">let</span> getUserName<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> firstName<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 大驼峰命名法（推荐用于类名）</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserAccount</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TodoList</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>常量命名</strong>：通常使用全大写字母，单词间用下划线分隔</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token constant">MAX_COUNT</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">API_BASE_URL</span> <span class="token operator">=</span> <span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container warning"><p class="hint-container-title">命名限制</p><p>以下内容不能作为标识符：</p><ul><li>关键字（如：if、else、for、class等）</li><li>保留字（可能在未来版本中成为关键字的词）</li><li>true、false、null</li></ul><p>使用保留字作为标识符可能导致代码在未来版本中出现兼容性问题。</p></div><h2 id="_3-注释" tabindex="-1"><a class="header-anchor" href="#_3-注释"><span>3.注释</span></a></h2><p>JavaScript支持两种注释风格，良好的注释习惯可以提高代码的可读性和可维护性：</p><h3 id="_3-1-单行注释" tabindex="-1"><a class="header-anchor" href="#_3-1-单行注释"><span>3.1 单行注释</span></a></h3><p>使用双斜杠（//）进行单行注释，通常用于简短的说明：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 声明变量</span></span>
<span class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 用户姓名</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// TODO: 后续需要添加数据验证</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 待实现</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-多行注释" tabindex="-1"><a class="header-anchor" href="#_3-2-多行注释"><span>3.2 多行注释</span></a></h3><p>使用 /* */ 进行多行注释，通常用于较长的说明文档或临时注释掉多行代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">/* </span>
<span class="line"> * 函数功能：计算两个数的和</span>
<span class="line"> * 参数说明：</span>
<span class="line"> *   - a: 第一个数</span>
<span class="line"> *   - b: 第二个数</span>
<span class="line"> * 返回值：两数之和</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">这段代码暂时注释掉</span>
<span class="line">function oldFunction() {</span>
<span class="line">  // 旧的实现</span>
<span class="line">}</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注释最佳实践</p><ol><li>注释要简洁明了，说明代码的用途而不是重复代码的内容</li><li>及时更新注释，确保注释与代码保持同步</li><li>使用特殊注释标记如 TODO、FIXME、XXX 等来标记需要特别注意的地方</li><li>为函数、类、复杂算法添加必要的文档注释</li></ol></div><h2 id="_4-严格模式" tabindex="-1"><a class="header-anchor" href="#_4-严格模式"><span>4.严格模式</span></a></h2><p>严格模式（Strict Mode）是ECMAScript 5引入的一个重要特性，它提供了更严格的错误检查和更安全的运行环境。</p><h3 id="_4-1-启用严格模式" tabindex="-1"><a class="header-anchor" href="#_4-1-启用严格模式"><span>4.1 启用严格模式</span></a></h3><p>有两种方式可以启用严格模式：</p><ol><li><strong>全局启用</strong>：在脚本文件的最开始添加 &#39;use strict&#39; 声明</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 这个文件中的所有代码都运行在严格模式下</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 这里是严格模式</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>函数级启用</strong>：在函数体的开始位置添加 &#39;use strict&#39; 声明</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">strictFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 这个函数中的代码运行在严格模式下</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">normalFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 这个函数运行在非严格模式下</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-严格模式的主要变化" tabindex="-1"><a class="header-anchor" href="#_4-2-严格模式的主要变化"><span>4.2 严格模式的主要变化</span></a></h3><ol><li><strong>变量必须声明</strong>：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 错误：未声明的变量</span></span>
<span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 正确：变量已声明</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>禁止删除变量或函数</strong>：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">delete</span> x<span class="token punctuation">;</span>  <span class="token comment">// 语法错误</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>禁止重名属性</strong>：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span>  <span class="token comment">// 语法错误：重复的属性名</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>禁止使用八进制字面量</strong>：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">023</span><span class="token punctuation">;</span>  <span class="token comment">// 语法错误：八进制</span></span>
<span class="line"><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">0o23</span><span class="token punctuation">;</span> <span class="token comment">// 正确：使用新的八进制语法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>this的值不会自动转换为全局对象</strong>：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">使用建议</p><ol><li>推荐在所有新项目中使用严格模式</li><li>在模块化开发中，严格模式是默认开启的</li><li>在老项目中添加严格模式时要谨慎，需要全面测试</li><li>使用严格模式有助于发现潜在问题，提高代码质量</li></ol></div><h2 id="_5-语句" tabindex="-1"><a class="header-anchor" href="#_5-语句"><span>5.语句</span></a></h2><p>JavaScript中的语句是执行特定操作的代码单元。了解语句的正确写法和最佳实践对于编写高质量的代码至关重要。</p><h3 id="_5-1-语句结束" tabindex="-1"><a class="header-anchor" href="#_5-1-语句结束"><span>5.1 语句结束</span></a></h3><p>ECMAScript中的语句通常以分号结尾。虽然在某些情况下可以省略分号，但为了代码的可靠性和可读性，建议始终添加分号。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 基本语句示例</span></span>
<span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>    <span class="token comment">// 变量声明语句</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 函数调用语句</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// return语句</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 不推荐的写法（省略分号）</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">25</span>        <span class="token comment">// 可能导致难以预料的问题</span></span>
<span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">90</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 推荐的写法（使用分号）</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>       <span class="token comment">// 清晰地表明语句结束</span></span>
<span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>     <span class="token comment">// 避免潜在的解析问题</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-代码块" tabindex="-1"><a class="header-anchor" href="#_5-2-代码块"><span>5.2 代码块</span></a></h3><p>代码块用花括号({})将多条语句组合在一起，常用于控制语句中。代码块可以创建作用域，影响变量的访问范围。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 基本代码块示例</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;继续加油&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 嵌套代码块示例</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;偶数：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;奇数：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-控制语句的代码块使用" tabindex="-1"><a class="header-anchor" href="#_5-3-控制语句的代码块使用"><span>5.3 控制语句的代码块使用</span></a></h3><p>虽然某些控制语句在只有一条语句时可以省略花括号，但为了代码的可维护性和避免错误，建议始终使用代码块。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 不推荐的写法（省略花括号）</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">)</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;验证通过&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 推荐的写法（使用花括号）</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;验证通过&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 多条件判断示例</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">sendReward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">sendEncouragement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;需要努力&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">sendHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">语句编写建议</p><ol><li>始终使用分号结束语句，保持代码的一致性</li><li>控制语句始终使用花括号，即使只有一条语句</li><li>保持适当的代码缩进，提高可读性</li><li>相关的语句组合在一起，形成有意义的代码块</li><li>避免过度嵌套代码块，保持代码结构清晰</li></ol></div>`,57)),l(n)])}const d=a(c,[["render",o]]),k=JSON.parse('{"path":"/notes/web/javascript/base/grammar/%E8%AF%AD%E6%B3%95.html","title":"JavaScript语法详解：基础语法、标识符、严格模式与语句","lang":"zh-CN","frontmatter":{"title":"JavaScript语法详解：基础语法、标识符、严格模式与语句","meta":[{"name":"description","content":"本文详细介绍JavaScript的基础语法规则，包括大小写敏感性、标识符命名规范、注释写法、严格模式使用以及语句结构。适合JavaScript初学者和想要深入理解JavaScript语法规则的开发者阅读。"},{"name":"keywords","content":"JavaScript, ECMAScript, 语法规则, 标识符, 驼峰命名, 严格模式, use strict, 代码注释, 语句结构, 代码块"}]},"headers":[{"level":2,"title":"1.区分大小写","slug":"_1-区分大小写","link":"#_1-区分大小写","children":[]},{"level":2,"title":"2.标识符","slug":"_2-标识符","link":"#_2-标识符","children":[{"level":3,"title":"2.1 命名规则","slug":"_2-1-命名规则","link":"#_2-1-命名规则","children":[]},{"level":3,"title":"2.2 命名约定","slug":"_2-2-命名约定","link":"#_2-2-命名约定","children":[]}]},{"level":2,"title":"3.注释","slug":"_3-注释","link":"#_3-注释","children":[{"level":3,"title":"3.1 单行注释","slug":"_3-1-单行注释","link":"#_3-1-单行注释","children":[]},{"level":3,"title":"3.2 多行注释","slug":"_3-2-多行注释","link":"#_3-2-多行注释","children":[]}]},{"level":2,"title":"4.严格模式","slug":"_4-严格模式","link":"#_4-严格模式","children":[{"level":3,"title":"4.1 启用严格模式","slug":"_4-1-启用严格模式","link":"#_4-1-启用严格模式","children":[]},{"level":3,"title":"4.2 严格模式的主要变化","slug":"_4-2-严格模式的主要变化","link":"#_4-2-严格模式的主要变化","children":[]}]},{"level":2,"title":"5.语句","slug":"_5-语句","link":"#_5-语句","children":[{"level":3,"title":"5.1 语句结束","slug":"_5-1-语句结束","link":"#_5-1-语句结束","children":[]},{"level":3,"title":"5.2 代码块","slug":"_5-2-代码块","link":"#_5-2-代码块","children":[]},{"level":3,"title":"5.3 控制语句的代码块使用","slug":"_5-3-控制语句的代码块使用","link":"#_5-3-控制语句的代码块使用","children":[]}]}],"git":{"updatedTime":1747659450000,"contributors":[{"name":"chenshicong","username":"chenshicong","email":"chenshicong666@qq.com","commits":4,"url":"https://github.com/chenshicong"}],"changelog":[{"hash":"d78ea0ac931ae3ba09698cb79415ce6c1e5c2ac2","time":1747659450000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"优化SEO"},{"hash":"7f9e1669cbce7cf7fddb2dc6d9204ded4e12ce00","time":1746537073000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"主页修改"},{"hash":"56e224fa3ee356e33897969021df2697811a8e81","time":1746503797000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"JavaScript语法"},{"hash":"7147a4a879b21c73d29b58ce542b287cf6736784","time":1745297037000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"js基础"}]},"filePathRelative":"notes/web/javascript/base/grammar/语法.md"}');export{d as comp,k as data};
